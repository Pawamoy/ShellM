.if n.ad l
.nh
.TH loop.sh 1 "" "Shellman 0.2.1" "User Commands"
.SH "NAME"
loop.sh \- Control the loops within your scripts (pause/stop them).
.SH "DESCRIPTION"
The loop.sh library provides functions to control loops within shells scripts.
When used, it allows to control the execution of already running loops from whatever
location or terminal. It is therefore possible to pause a script from another terminal
without hitting Control\-Z in the shell process running the script.

Here is an example of usage in a script called "my\-script":

    #!/bin/bash
    include flow/loop.sh

    loop init "my\-loop"

    i=0
    while true; do

      loop control "my\-loop"

      echo "$i"
      (( i++ ))
      sleep 1
    done

And the commands used in another shell to control the execution of "my\-loop":

    $ loop pause "my\-script" "my\-loop"
    $ loop resume "my\-script" "my\-loop"
    $ loop stop "my\-script" "my\-loop"

This execution control mechanism can even allow to control several loops and inner loops
(nested loops) at the same time, or make different scripts dependents from each other.

.SH "FUNCTIONS"
loop
.br
.IP "\fBloop\fR" 4
Pause (resume), stop or check that a loop is alive or dead.

.ul
Parameters:
  \fBCOMMAND\fR
    COMMAND can be the following:

    \- `alive`: return True if the loop is alive, False otherwise.
    \- `control`: shortcut for loop paused? wait. loop dead? break.
    \- `dead`: return True if the loop is dead, False otherwise.
    \- `exists`: return True if loop has been initialized, False otherwise.
    \- `init`: init a new loop control and start it.
    \- `pause`: pause the loop. It will wait until resumed or stopped.
    \- `resume`: resume the loop.
    \- `stop`: definitely stop the loop.
    \- `wait`: wait as long as loop is paused.


